Title: Тег HTML 5 <dialog>
Content: <h2>Основное</h2>

Тег  `<dialog>` впервые представлен в спецификации HTML 5 (в 5.1 если точнее). Он предоставляет возможность сздания нативных, модальных окон.
Ранее, приходилось создавать модальное окно, выравнивать по центру страницы, добавлять обертку для затемнения, ограничивать скролл страницы и проделывать еще кучу манипуляций. Теперь все это возможно сделать при помощи нативного, встроенного в html5 тега. Возможность использования этого тега пока ограничено поддержкой браузерами - она довольно скупа.

<img src="http://blog.hydrock.ru/bl-content/uploads/a88b8876da.jpg" width="80%">
<!-- pagebreak -->
Возможно, в скором времени остальные бразеры подтянутся, и это облегчит всем жизнь. Пока есть несколько полифилов (например <a href="https://github.com/GoogleChrome/dialog-polyfill" target="blank">полифил</a> от Google), но использовать его все же рановато. Тем неменее попробуем разобраться что и как.

Тег  `<dialog>` классифицируется как "корневой секционный" элемент, и так же как и элементы `<body>` , `<details>` и `<blockquote>`, создает новый независимый блок с контентом. Вы можно сделать дочерним к **body** элемент или же использовать наподобие `<div>` или `<section>` – оба этих подхода правильные.

```
<body>

	<dialog></dialog>
   
    <div>
        <dialog></dialog>
    </div>
     
    <section>
        <dialog></dialog>
    </section>
	
</body>
```

Браузеры, поддерживающие этот тег, будет показывать этот элемент скрытым. Показать его возможно несколькими способами:
1. Установить тегу `<dialog>` атрибут `open`, без значения - `<dialog open></dialog>` (Служит для предварительного отображения диалогового окна)

<iframe width="100%" height="300" src="https://jsfiddle.net/Hydrock/45c3pkc4/6/embedded/html,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Если мы будет добавлять и удалять атрибут, мы сможем показывать и скрывать окно.

2. Вызвать функции `show()` или `showModal()`
Функция `close()` служит для закрития окна.

<iframe width="100%" height="300" src="https://jsfiddle.net/Hydrock/45c3pkc4/8/embedded/html,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Методы `show()` и `showModal()` так же добавляют тегу `<dialog>` атрибут `open`, но с разными стилями и особенностями.

Метод `show()` показывает диалог в потоке, т. е. там где он расположен в верстке. Можно добавить кастомные стили, что бы показать это окно как модальное, выровнять по центру, добавить абсолютное позиционирование, и что то вроде подложки для затемнения экрана. Чтио бы этого не делать, нам поможет метод `showModal()`

<iframe width="100%" height="300" src="https://jsfiddle.net/Hydrock/45c3pkc4/12/embedded/html,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Метод `showModal()` покажет диалог как модальное окно. Оно отобразится по центру страницы, расположится в верху слое, что предотвратит наложения применением  `z-index`, относительного позиционирования (relative position) и overflow к родительскому элементу.

В примере ниже показано как модальное окно выводится поверх всего контента, даже если у родительского блока задан `overflow: hidden; `
<iframe width="100%" height="300" src="https://jsfiddle.net/Hydrock/45c3pkc4/10/embedded/html,css,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2>Кастомизация стилей</h2>

Диалоговые окна стилизованы по умолчанию, но стили конечно же возможно переопределить. Когда диалоговое окно отображается методом `showModal()`, как модальное окно, у тега диалога появляется псевдоэлемент `::backdrop` (На данный момент в инспекторе его не видно.). Он появляется Непосредственно под диалоговым окном, перекрывая всю область просмотра (viewport). Он используется как подложка что бы затемнить задний фон страницы и обратить внимание пользователя на модальное окно. Соответственно возможно стилизовать и этот псевдоэлемент.

<iframe width="100%" height="300" src="https://jsfiddle.net/Hydrock/45c3pkc4/16/embedded/html,css,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

Интересно то, что если стилизовать этот блок по другому, например задать фиксированную ширину и высоту, то контент под ним остается не кликабельным.

<iframe width="100%" height="300" src="https://jsfiddle.net/Hydrock/45c3pkc4/17/embedded/html,css,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2>Интересности</h2>

Тут хочется отметить очень интересный момент. Если вызвать метод `show()` то диалоговое окно покажется в потоке. Если пытаться вызвать этот метод еще раз то ничего не произойдет. То же будет если вызывать метод `showModal()` при открытом диалоговом окне - ничего не произойтет. Если после закрытия диалогового окна вызвать метод `showModal()` то у окна появляется псевдоэлемент `::backdrop` и само окно получает новые стили - выравниваясь по центру страницы. Теперь, если закрыть окно и вызвать снова метод `show()`, диалоговое окно будет отображаться в центре, но без псевдоэлемента. Очень странное поведение....

Так же, если вы интегрируете в диалоговое окно форму / `<form>` , в качестве метода формы можно использовать `method="dialog"`

<iframe width="100%" height="300" src="https://jsfiddle.net/Hydrock/0rf2e663/embedded/js,html,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2>Итог</h2>

Вообщем как видно из вышеперечисленного, `<dialog>` скорее эксперемент чем готовая технология. Существует он уже давно, а вот производители браузеров не спешат реализовывать спецификацию. Очень много странностей и вопросов на которые нет ответа. Вообщем поживем - увидим.

Так же вот парочка статей на эту тему - очень хороши:<br>
<a href="https://canonium.com/articles/html-the-dialog-element" target="blank">https://canonium.com/articles/html-the-dialog-element</a><br>
<a href="https://webdesign.tutsplus.com/ru/tutorials/native-popups-and-modals-with-the-html5-dialog-element--cms-23876" target="blank">https://webdesign.tutsplus.com/ru/tutorials/native-popups-and-modals-with-the-html5-dialog-element--cms-23876</a>