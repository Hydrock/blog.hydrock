Title: Canvas - Учимся вместе #1 - Инициализация и линии
Content: <h2>Введение</h2>
Все хоть как то связаны с веб разработкой слыхали про `canvas`. <a href="https://ru.wikipedia.org/wiki/Canvas_(HTML)" target="_blank">Википедия</a> говорит следующее - Canvas (англ. canvas — «холст», рус. канва́с) — элемент HTML5, предназначенный для создания растрового двухмерного изображения при помощи скриптов, обычно на языке JavaScript. У canvas много как плюсов, как и минусов. Но сейчас не об этом - попробуем разобраться во всем этом.
<h2>Тег canvas</h2>
Тег canvas и есть наш холст на котором рисуется вся графика. Он имеетbeginPath()`` закрывающий тег. Если canvas не поддерживается браузером, то будет отображен контент внутри тега. С помощью атрибутов установим высоту и ширину нашего холста, и навесим ID. Как я понял - canvas - это инлайновый элемент. Поэтому текст, идущий следом, будет на той же линии что и холст. По умолчанию блок прозрачный. Можно окрасить его с помощью CSS.  

`<canvas id='test' height='320' width='480' >Отрисовка невозможна - Обновите браузер.</canvas>`

Создается впечатление, что ширина и высота задаваемая атрибутами, определяет внутреннюю систему координат холста, в то время как свойства CSS просто определяет размер окна, в котором он будет показан.

Вот небольшой пример. Размер холста в обоих случаях одинаков, рисунки так же одинаковы, но первый холст имеет атрибуты `width="250" height="250"`, второй `width="1000" height="400"`. В код пока можно не смотреть - посмотрите результат.
<script async src="https://jsfiddle.net/SmiteVils/wxr3vum0/13/embed/js,html,css,result/dark/"></script>

<h2>Начинаем рисовать - getContext</h2>
Первым делом создадим ссылку на наш элемент canvas:

`var canvas = document.getElementById("test");`

Теперь нужно получить контекст.

`var context = canvas.getContext("2d");`

Если совсем просто, то мы получаем из тега, сам холст и говорим как мы будем рисовать. В нашем случаее "2d".

Теперь попробуем нарисовать квадрат:

`context.fillRect(100, 100, 20, 20);` - context.fillRect(координата X, координата Y, ширина элемента, высота элемента);

В итоге, мы получим следующее:

<script async src="https://jsfiddle.net/SmiteVils/ry6h7kpn/6/embed/js,html,css,result/dark/"></script>

Существует много разных примитивов - постараюсь описать основные.
<h3>Контуры (Линии)</h3>
Чтобы нарисовать линию с помощью сanvas, нам понадобятся методы beginPath(), MoveTo(), LineTo(), closePath(), и Stroke().

Хочется отметить что есть так называемые *карандашные* методы и *чернильные*. Карандашные - `beginPath()`, `MoveTo()`, `LineTo()` - рисуют линию но не закрашивают контур, она есть, но на холсте вы не увидите ничего пока не выполните один из чернильных методов - `Fill()`, `Stroke()`.

```
ctx.beginPath(); Объявляем, что начинаем новый контур. Необходим когда хотим задать разные стили объектам на холсте.
context.moveTo(0,0); // Метод moveTo перемещаем текущие положение на холсте к координатам (x, y), как будто ходожник ставит кисть в нужное место
context.lineTo(200,100); // Метод lineTo рисует линию от текущего положения на координатной оси к заданным пауаметрам. lineTo (координата x, координата y). при этом положение перемещается в конец линии.
context.stroke(); // Делает нарисованные контуры видимыми.
```

<script src="https://jsfiddle.net/SmiteVils/ry6h7kpn/11/embed/result,js,html,css/dark/"></script>
<h3>Фигуры из линий</h3>
Если после первой отрисовки `линии context.lineTo(200,100);` продолжать вызывать эту функцию, то можно продолжать рисовать фигуры.
<script src="https://jsfiddle.net/SmiteVils/ry6h7kpn/14/embed/result,js,html,css/dark/"></script>
Первая и последняя точка ломанной линии замыкают фигуру. Если на нашем контексте выполнить метод `Fill()` то будет залита фигура, образующаяся этими точками.
<script src="https://jsfiddle.net/SmiteVils/ry6h7kpn/16/embed/result,js,html,css/dark/"></script>
Или вот такая вывернутая:
<script src="https://jsfiddle.net/SmiteVils/ry6h7kpn/18/embed/result,js,html,css/dark/"></script>
Так будет снова и снова пока вы не начнете новый контур - метод `beginPath()`.

Что бы соединить первую и последнюю точку контура используйте `closePath()`
<script async src="https://jsfiddle.net/SmiteVils/ry6h7kpn/27/embed/result,js,html,css/dark/"></script>
При рисовании на canvas важно знать об эффекте Алиасинга, когда, например, линия попадает между пикселями и рисуется в 2 пикселя. Можно использовать такую строчку `context.translate(0.5, 0.5);` в самом начале, но подробнее позже.

В результате, мы можем рисовать различные фигуры и закрашивать их.
<script async src="https://jsfiddle.net/SmiteVils/ry6h7kpn/29/embed/result,js,html,css/dark/"></script>







