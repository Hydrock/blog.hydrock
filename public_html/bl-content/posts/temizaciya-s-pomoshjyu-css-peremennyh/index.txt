Title: Темизация с помощью CSS переменных
Content: Если вы разрабатываете и поддерживаете темы для вашего веб приложения, то наверняка знаете, как трдно это бывает. Как правило, в конечном итоге, получается несколько отдельных таблиц стилей и скриптик, который подставляет нужный стиль.
<div style="text-align: center; padding-bottom: 10px;">
	<img src="https://cdn-images-1.medium.com/max/800/1*ZKSbzCov1N2F5uKZ3NWtWA.png" style="width: 50%;">
</div>
Все становится намного сложнее, если мы хотим добавить динамики при смене стилей. В прошлом без смены классов и каскада в CSS было не обойтись. Попробуем исправить эту ситуацию при помощи <dfn>CSS</dfn> переменных. Я буду рассматривать эту проблему с точки зрения темизации , однако это решение будет подходить и для других вариантов стилизации.

Предположим, имеется меню на боковой панели, котораяч использует цвета, "тёмной темы" (так же заголовок), а остальная часть приложения использует "белую тему".
<div style="text-align: center; padding-bottom: 10px;">
	<img src="https://cdn-images-1.medium.com/max/800/1*sm7xbJqW6Igz0wIuD0XBhQ.png" style="width: 70%;">
</div>
Вместо того, что бы писать свои стили для бокового меню, вы можете использовать свою «темную» тему, а для остального контента «белую», н ов таком случаее придется загружать обе таблици стилей. Кроме того, в каком то месте, мы точне можем наткнуться на пересечение стилей, так же будет очень много каскада.
<div style="text-align: center; padding-bottom: 10px;">
	<img src="https://cdn-images-1.medium.com/max/800/1*IwuCKNq9rjIERkDLFKi9Gw.png" style="width: 70%;">
</div>
Нужно сделать модульные темы! Это звучит довольно круто!
<h2>CSS Переменные</h2>
Я хочу показать довольно простой способ создать легкие темы с единым файлом CSS, а также возможность использования нескольких тем в пределах одной страницы без каких-либо дополнительных наворотов.

Начнем с нескольких глобальных переменных. Например мы хоти различные цвета текста и фона, чтобы иметь определенный контраст. В палитре мы всегда будем определять цвета от низкого до высокого контрастов.  Таким образом, **base-1** имеет самый низкий контраст (1: 1),  а **base-4** высокую.

```
.theme {
  background-color: var(--base-1);
  color: var(--base-4);
}
```

Теперь напишем классы тем, каждый со своей цветовой палитрой.

```
.theme--light {
  @extend .theme;
  --base-1: #f2f2f2;
  --base-2: #dadada;
  --base-3: #aaa;
  --base-4: #000;
}
.theme--dark {
  @extend .theme;
  --base-1: #000;
  --base-2: #333;
  --base-3: #999;
  --base-4: #fff;
}
```

Теперь мы можем применить модульную темизацию путем добавления класса к любому компоненту. Замечательное в CSS переменных является то, что они наследуют переменные и их значения от родителей. Кроме того, если елемент получает класс, объявляющий новые значения переменных, то он будет наследовать уже эти новые свойства, а также дочерние элементы.
<iframe width="100%" height="300" src="https://jsfiddle.net/Hydrock/61ygo0mt/1/embedded/result,html,css/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<h2>Что хорошего в этом подходе?</h2>
1. Цвета объявляются всего один раз, а не  быть разбросоны по файлам стилей.
2. Компоненты в качестве свойств имеют переменные, а не фиксированные значения.
3. Несколько тем одновременно могут использоваться в рамках одного приложения.
4. Темы могут быть использованы отдельных компонентах или целых регионах.
5. Быстрая замена темы, путем смены классов.
6. Такой подход удобен при динамической темизации.
<h2>Еще мысли</h2>
Теперь посмотрим на следующее. Например, мы имеем приложение с "светлой" темой, а некоторые регионы должны быть с "темной" темой, а некоторые снова "светлые". В связи с этим придется ввести некоторые ограничения, чтобы убедиться что свойства унаследованны.

Например, если я хочу темную тему, полностью темную, без вкраплений светлой темы, можно сделать следующее:

```
.theme--dark {
  --base-1: #000;
  --base-2: #333;
  --base-3: #999;
  --base-4: #fff;
  
  .theme--light {
    --base-1: #000;
    --base-2: #333;
    --base-3: #999;
    --base-4: #fff;
  }
}
```

Теперь можно гарантировать темная тема, всегда будет только темная,

Поддержка уже сейчас довольна неплохая, но надеюсь в скором времени все будет еще лучше:

<p class="ciu_embed" data-feature="css-variables" data-periods="future_1,current,past_1,past_2">
  <a href="http://caniuse.com/#feat=css-variables">Can I Use css-variables?</a> Data on support for the css-variables feature across the major browsers from caniuse.com.
</p>

<script src="https://cdn.jsdelivr.net/caniuse-embed/1.0.1/caniuse-embed.min.js"></script>

Оригинал статьи по <a href="https://medium.com/@NateBaldwin/theming-with-css-variables-d7acddd3a699#.mhzpteomg">этой ссылке</a>

